// Code generated by 'yaegi extract github.com/antchfx/htmlquery'. DO NOT EDIT.

package yaegi_extract

import (
	"github.com/antchfx/htmlquery"
	"reflect"
)

func init() {
	Symbols["github.com/antchfx/htmlquery/htmlquery"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CreateXPathNavigator":    reflect.ValueOf(htmlquery.CreateXPathNavigator),
		"DisableSelectorCache":    reflect.ValueOf(&htmlquery.DisableSelectorCache).Elem(),
		"ExistsAttr":              reflect.ValueOf(htmlquery.ExistsAttr),
		"Find":                    reflect.ValueOf(htmlquery.Find),
		"FindOne":                 reflect.ValueOf(htmlquery.FindOne),
		"InnerText":               reflect.ValueOf(htmlquery.InnerText),
		"LoadDoc":                 reflect.ValueOf(htmlquery.LoadDoc),
		"LoadURL":                 reflect.ValueOf(htmlquery.LoadURL),
		"OutputHTML":              reflect.ValueOf(htmlquery.OutputHTML),
		"Parse":                   reflect.ValueOf(htmlquery.Parse),
		"Query":                   reflect.ValueOf(htmlquery.Query),
		"QueryAll":                reflect.ValueOf(htmlquery.QueryAll),
		"QuerySelector":           reflect.ValueOf(htmlquery.QuerySelector),
		"QuerySelectorAll":        reflect.ValueOf(htmlquery.QuerySelectorAll),
		"SelectAttr":              reflect.ValueOf(htmlquery.SelectAttr),
		"SelectorCacheMaxEntries": reflect.ValueOf(&htmlquery.SelectorCacheMaxEntries).Elem(),

		// type definitions
		"NodeNavigator": reflect.ValueOf((*htmlquery.NodeNavigator)(nil)),
	}
}
